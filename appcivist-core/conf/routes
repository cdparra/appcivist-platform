# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET     /public/*file               controllers.Assets.at(path="/public", file)

# Assemblies API
GET     /api/assemblies                      controllers.Assemblies.findAssemblies()
#POST    /api/assembly                     controllers.Assemblies.createAssembly
#PUT     /api/assembly/:id                 controllers.Assemblies.updateAssembly(assemblyId: Long)
#GET     /api/assembly/:id                 controllers.Assemblies.exportAssembly(assemblyId: Long)

#####################################################################################
# Very basic User and Authentication Management based on play-authenticate
GET     /api/user                                        controllers.Users.getUsers()
GET     /api/user/login                                  controllers.Users.getLoginForm()
GET     /api/user/:uid                                   controllers.Users.getUser(uid: Long)
GET 	/api/user/loggedin/:uid 						 controllers.Users.getCurrentUser(uid: Long)
GET     /api/user/email/:email                                 controllers.Users.getUserByEmail(email: String) 

POST    /api/user/login                                  controllers.Users.doLogin()
POST    /api/user/logout                                 controllers.Users.doLogout()
POST    /api/user/signup                                 controllers.Users.doSignup()

PUT     /api/user/:uid                                   controllers.Users.updateUser(uid: Long) 
DELETE  /api/user/:uid                                   controllers.Users.deleteUser(uid: Long)
DELETE  /api/user/:uid/force                             controllers.Users.deleteUserForce(uid: Long)

# Play Authenticate endpoints to validate/integrate, used to verify the email
GET     /api/user/verify/:token         				 controllers.Users.verify(token: String)
GET     /api/user/unverified            				 controllers.Users.unverified()
GET     /api/user/exists                				 controllers.Users.exists()
GET     /api/login/denied                                controllers.Users.onLoginUserNotFound()
GET     /api/authenticate/:provider/denied               controllers.Users.oAuthDenied(provider: String)
GET     /api/authenticated                               controllers.Restricted.index()
GET     /api/login/:id                                   controllers.Restricted.id(id: String)
GET     /api/authenticate/:provider                      controllers.AuthenticateLocal.authenticate(provider: String)






