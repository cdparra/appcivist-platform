# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#####################################################################################
# Home page
GET       /                                             controllers.Application.index()

#####################################################################################
# CORS Support
OPTIONS   /*path                                        controllers.Application.checkPreFlight(path)

#####################################################################################
# Map static resources from the /public folder to the /assets URL path
GET       /assets/*file                                 controllers.Assets.versioned(path="/public", file: Asset)
GET       /public/*file                                 controllers.Assets.versioned(path="/public", file: Asset)


#####################################################################################
# API Docs
#GET       /api-docs.json                                controllers.ApiHelpController.getResources()
GET       /api/doc                                      controllers.Application.swaggerDocs()
GET       /api/doc.json                                 @pl.matisoft.swagger.ApiHelpController.getResources()
GET       /api/doc.json/user                            @pl.matisoft.swagger.ApiHelpController.getResource(path="/user")
GET       /api/doc.json/assembly                        @pl.matisoft.swagger.ApiHelpController.getResource(path="/assembly")
GET       /api/doc.json/group                           @pl.matisoft.swagger.ApiHelpController.getResource(path="/group")
GET       /api/doc.json/membership                      @pl.matisoft.swagger.ApiHelpController.getResource(path="/membership")
GET       /api/doc.json/campaign                        @pl.matisoft.swagger.ApiHelpController.getResource(path="/campaign")

#####################################################################################
# User and Authentication Management based on play-authenticate
# TODO: cleanup, remove what is not used and keep what's important
GET       /user                                         controllers.Users.getUsers() 
GET       /user/:uid                                    controllers.Users.getUser(uid: Long)
GET       /user/loggedin                                controllers.Users.getCurrentUser()
GET       /user/:uid/profile                            controllers.Users.profile(uid: Long)
POST      /user/signup                                  controllers.Users.doSignup()
POST      /user/login                                   controllers.Users.doLogin()
POST      /user/logout                                  controllers.Users.doLogout()
PUT       /user/:uid                                    controllers.Users.updateUser(uid: Long)
PUT       /user/:uid/profile                            controllers.Users.updateUserProfile(uid: Long)
DELETE    /user/:uid                                    controllers.Users.deleteUser(uid: Long)
DELETE    /user/:uid/force                              controllers.Users.deleteUserForce(uid: Long)
GET       /user/verify/:token                           controllers.Users.verify(token: String)

#####################################################################################
# Assemblies API
GET       /assembly                                     controllers.Assemblies.findAssemblies()
POST      /assembly                                     controllers.Assemblies.createAssembly()
GET       /assembly/:id                                 controllers.Assemblies.findAssembly(id: Long)
PUT       /assembly/:id                                 controllers.Assemblies.findAssembly(id: Long)
DELETE    /assembly/:id                                 controllers.Assemblies.findAssembly(id: Long)
POST      /assembly/:id/membership/:type                controllers.Assemblies.createAssemblyMembership(id: Long, type: String)
GET       /assembly/:id/membership/:status              controllers.Assemblies.listMembershipsWithStatus(id: Long, status: String)

#####################################################################################
# WorkingGroup API
GET       /assembly/:aid/groups                         controllers.WorkingGroups.findWorkingGroups(aid: Long)
GET       /assembly/:aid/group/:gid                     controllers.WorkingGroups.findWorkingGroup(aid: Long, gid: Long)
PUT       /assembly/:aid/group                          controllers.WorkingGroups.updateWorkingGroup(aid: Long, gid: Long)
POST      /assembly/:aid/group                          controllers.WorkingGroups.createWorkingGroup(aid: Long)
DELETE    /assembly/:aid/group/:gid                     controllers.WorkingGroups.deleteWorkingGroup(aid: Long, gid: Long)
POST      /assembly/:aid/group/:id/membership/:type     controllers.WorkingGroups.createGroupMembership(aid: Long, id: Long, type: String)  
GET       /assembly/:aid/group/:id/membership           controllers.WorkingGroups.listMemberships(aid: Long, id: Long)
GET       /assembly/:aid/group/:id/membership/:status   controllers.WorkingGroups.listMembershipsWithStatus(aid: Long, id: Long, status: String)

#####################################################################################
# Invitations and Requests to join a Group and/or and Assembly
# For invitations membership, let's create a random 64 char token
POST      /membership                                   controllers.Memberships.createMembership()
GET       /membership/:id                               controllers.Memberships.readMembership(id: Long)
GET       /membership/:id/roles                         controllers.Memberships.readMembershipRoles(id: Long)
POST      /membership/:id/role                          controllers.Memberships.addMembershipRole(id: Long)
DELETE    /membership/:id/role/:rid                     controllers.Memberships.deleteMembershipRole(id: Long, rid: Long)
PUT       /membership/:id/:status                       controllers.Memberships.updateMembershipStatus(id: Long, status: String)
DELETE    /membership/:id                               controllers.Memberships.deleteMembership(id: Long) 
GET       /membership/:id/verify/:token                 controllers.Memberships.verifyMembership(id: Long, token: String) 

#####################################################################################
# Role API (might be we don't need this) 
GET       /role                                         controllers.Roles.findRoles()
GET       /role/:rid                                    controllers.Roles.findRole(rid: Long)
PUT       /role/:rid                                    controllers.Roles.updateRole(rid: Long)
POST      /role                                         controllers.Roles.createRole()
DELETE    /role/:rid                                    controllers.Roles.deleteRole(rid: Long)

#####################################################################################
# Config API
GET       /assembly/:aid/config                         controllers.Configs.findConfigs(aid: Long)
GET       /assembly/:aid/config/:cid                    controllers.Configs.findConfig(aid: Long, cid: Long)
PUT       /assembly/:aid/config/:cid                    controllers.Configs.updateConfig(aid: Long, cid: Long)
POST      /assembly/:aid/config                         controllers.Configs.createConfig(aid: Long)
DELETE    /assembly/:aid/config/:cid                    controllers.Configs.deleteConfig(aid: Long, cid: Long)

#####################################################################################
# Campaign API
GET       /assembly/:aid/campaign                       controllers.Campaigns.findCampaigns(aid: Long)
GET       /assembly/:aid/campaign/:cid                  controllers.Campaigns.findCampaign(aid: Long, cid: Long)
PUT       /assembly/:aid/campaign/:cid                  controllers.Campaigns.updateCampaign(aid: Long, cid: Long)
POST      /assembly/:aid/campaign                       controllers.Campaigns.createCampaign(aid: Long)
DELETE    /assembly/:aid/campaign/:cid                  controllers.Campaigns.deleteCampaign(aid: Long, cid: Long)

#####################################################################################
# CampaignPhase API
GET       /assembly/:aid/campaign/:cid/phase            controllers.CampaignPhases.findCampaignPhases(aid: Long, cid:Long)
GET       /assembly/:aid/campaign/:cid/phase/:cpid      controllers.CampaignPhases.findCampaignPhase(aid: Long, cid: Long, cpid: Long)
PUT       /assembly/:aid/campaign/:cid/phase/:cpid      controllers.CampaignPhases.updateCampaignPhase(aid: Long, cid: Long, cpid: Long)
POST      /assembly/:aid/campaign/:cid/phase            controllers.CampaignPhases.createCampaignPhase(aid: Long, cid: Long)
DELETE    /assembly/:aid/campaign/:cid/phase/:cpid      controllers.CampaignPhases.deleteCampaignPhase(aid: Long, cid: Long, cpid: Long)

#####################################################################################
# Contribution API
GET       /assembly/:aid/contribution                   controllers.Contributions.findContributions(aid: Long)
GET       /assembly/:aid/contribution/:cid              controllers.Contributions.findContribution(aid: Long, cid: Long)
PUT       /assembly/:aid/contribution/:cid              controllers.Contributions.updateContribution(aid: Long, cid: Long)
POST      /assembly/:aid/contribution                   controllers.Contributions.createContribution(aid: Long)
DELETE    /assembly/:aid/contribution/:cid              controllers.Contributions.deleteContribution(aid: Long, cid: Long)

# Contribution ISSUE API
GET       /assembly/:aid/issue                          controllers.Contributions.findContributions(aid: Long)
GET       /assembly/:aid/issue/:cid                     controllers.Contributions.findContribution(aid: Long, cid: Long)
PUT       /assembly/:aid/issue/:cid                     controllers.Contributions.updateContribution(aid: Long, cid: Long)
POST      /assembly/:aid/issue                          controllers.Contributions.createContribution(aid: Long)
DELETE    /assembly/:aid/issue/:cid                     controllers.Contributions.deleteContribution(aid: Long, cid: Long)

# Contribution IDEA API
GET       /assembly/:aid/idea                           controllers.Contributions.findContributions(aid: Long)
GET       /assembly/:aid/idea/:cid                      controllers.Contributions.findContribution(aid: Long, cid: Long)
PUT       /assembly/:aid/idea/:cid                      controllers.Contributions.updateContribution(aid: Long, cid: Long)
POST      /assembly/:aid/idea                           controllers.Contributions.createContribution(aid: Long)
DELETE    /assembly/:aid/idea/:cid                      controllers.Contributions.deleteContribution(aid: Long, cid: Long)

# Contribution QUESTION API
GET       /assembly/:aid/question                       controllers.Contributions.findContributions(aid: Long)
GET       /assembly/:aid/question/:cid                  controllers.Contributions.findContribution(aid: Long, cid: Long)
PUT       /assembly/:aid/question/:cid                  controllers.Contributions.updateContribution(aid: Long, cid: Long)
POST      /assembly/:aid/question                       controllers.Contributions.createContribution(aid: Long)
DELETE    /assembly/:aid/question/:cid                  controllers.Contributions.deleteContribution(aid: Long, cid: Long)

# Contribution COMMENT API
GET       /assembly/:aid/comments                       controllers.Contributions.findContributions(aid: Long)
GET       /assembly/:aid/comment/:cid                   controllers.Contributions.findContribution(aid: Long, cid: Long)
PUT       /assembly/:aid/comment/:cid                   controllers.Contributions.updateContribution(aid: Long, cid: Long)
POST      /assembly/:aid/comment                        controllers.Contributions.createContribution(aid: Long)
DELETE    /assembly/:aid/comment/:cid                   controllers.Contributions.deleteContribution(aid: Long, cid: Long)

# Contribution FEEDBACK API
#GET       /assembly/:aid/comment                       controllers.Contributions.findContributions(aid: Long)
#GET       /assembly/:aid/comment/:cid                   controllers.Contributions.findContribution(aid: Long, cid: Long)
#PUT       /assembly/:aid/comment/:cid                   controllers.Contributions.updateContribution(aid: Long, cid: Long)
#POST      /assembly/:aid/comment                        controllers.Contributions.createContribution(aid: Long)
#DELETE    /assembly/:aid/comment/:cid                   controllers.Contributions.deleteContribution(aid: Long, cid: Long)

# Contribution PROPOSAL API
#GET       /assembly/:aid/comment                       controllers.Contributions.findContributions(aid: Long)
#GET       /assembly/:aid/comment/:cid                   controllers.Contributions.findContribution(aid: Long, cid: Long)
#PUT       /assembly/:aid/comment/:cid                   controllers.Contributions.updateContribution(aid: Long, cid: Long)
#POST      /assembly/:aid/comment                        controllers.Contributions.createContribution(aid: Long)
#DELETE    /assembly/:aid/comment/:cid                   controllers.Contributions.deleteContribution(aid: Long, cid: Long)

#####################################################################################
# TODO Play Authenticate endpoints to check if we need/validate/integrate better
GET       /user/link                                    controllers.Users.link
GET       /user/unverified                              controllers.Users.unverified()
GET       /user/exists                                  controllers.Users.exists()
GET       /user/login/denied                            controllers.Users.onLoginUserNotFound()
GET       /user/authenticate/:provider/denied           controllers.Users.oAuthDenied(provider: String)
GET       /user/authenticated                           controllers.Restricted.index()
GET       /user/login/:id                               controllers.Restricted.id(id: String)
GET       /authenticate/:provider                       controllers.AuthenticateLocal.authenticate(provider: String)
GET       /user/password/reset/:token                   controllers.Users.resetPassword(token: String)
POST      /user/password/reset                          controllers.Users.doResetPassword
GET       /user/password/change                         controllers.Users.changePassword
POST      /user/password/change                         controllers.Users.doChangePassword
GET       /user/verify                                  controllers.Users.verifyEmail
GET       /user/account                                 controllers.Users.askLink
POST      /user/account                                 controllers.Users.doLink
GET       /user/merge                                   controllers.Users.askMerge
POST      /user/merge                                   controllers.Users.doMerge
GET       /user/password/forgot                         controllers.Users.forgotPassword(email: String ?= "")
POST      /user/password/forgot                         controllers.Users.doForgotPassword

#####################################################################################
# Composition Engine endpoints 
GET       /assembly/:aid/issue                          controllers.ServiceAssemblies.findIssues(aid: Long)
GET       /assembly/:aid/service                        controllers.ServiceAssemblies.findServices(aid: Long)
GET       /assembly/:aid/service/:sid/operations        controllers.ServiceAssemblies.findServiceOperations(aid: Long, sid: Long)
GET       /assembly/:aid/service/:sid/operation/:oid    controllers.ServiceAssemblies.findServiceOperationById(aid: Long, sid: Long, oid: Long)
GET       /assembly/:aid/issue/:iid/campaigns           controllers.ServiceAssemblies.findIssueCampaigns(aid: Long, iid: Long)
GET       /assembly/:aid/issue/:iid/campaign/:cid       controllers.ServiceAssemblies.findIssueCampaignById(aid: Long, iid: Long, cid: Long)