# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET            /                                                     controllers.Application.index()

# CORS Support
OPTIONS        /*path                                                controllers.Application.checkPreFlight(path)

# Map static resources from the /public folder to the /assets URL path
GET            /assets/*file                                         controllers.Assets.at(path="/public", file)
GET            /public/*file                                         controllers.Assets.at(path="/public", file)

#####################################################################################
# Very basic User and Authentication Management based on play-authenticate
# TODO: cleanup, remove what is not used and keep what's important
GET            /api/user                                             controllers.Users.getUsers()
GET            /api/user/login                                       controllers.Users.getLoginForm()
GET            /api/user/:uid                                        controllers.Users.getUser(uid: Long)
GET            /api/user/loggedin/:uid                               controllers.Users.getCurrentUser(uid: Long)
GET            /api/user/email/:email                                controllers.Users.getUserByEmail(email: String)

POST           /api/user/login                                       controllers.Users.doLogin()
POST           /api/user/logout                                      controllers.Users.doLogout()
POST           /api/user/signup                                      controllers.Users.doSignup()

PUT            /api/user/:uid                                        controllers.Users.updateUser(uid: Long)
DELETE         /api/user/:uid                                        controllers.Users.deleteUser(uid: Long)
DELETE         /api/user/:uid/force                                  controllers.Users.deleteUserForce(uid: Long)

# Play Authenticate endpoints to validate/integrate, used to verify the email
GET            /api/user/verify/:token                               controllers.Users.verify(token: String)
GET            /api/user/unverified                                  controllers.Users.unverified()
GET            /api/user/exists                                      controllers.Users.exists()
GET            /api/login/denied                                     controllers.Users.onLoginUserNotFound()
GET            /api/authenticate/:provider/denied                    controllers.Users.oAuthDenied(provider: String)
GET            /api/authenticated                                    controllers.Restricted.index()
GET            /api/login/:id                                        controllers.Restricted.id(id: String)
GET            /api/authenticate/:provider                           controllers.AuthenticateLocal.authenticate(provider: String)


# Assemblies API
GET            /api/assemblies                                       controllers.Assemblies.findAssemblies()
GET            /api/assembly/:aid/issues                             controllers.Assemblies.findIssues(aid: Long)
POST           /api/assembly                                         controllers.Assemblies.createAssembly()

# TODO 
#POST    /api/assembly/bulked              controllers.Assemblies.createAssemblyBulked()
#POST    /api/organization/:id/assembly    controllers.Assemblies.createAssemblyForOrganization()
#GET     /api/assembly/:id                 controllers.Assemblies.exportAssembly(assemblyId: Long)

# Invitations to a Group (creating the membership, depending on the typ, will be invitation or request)
# For each membership, let's create a random 64 char token
#POST    /api/group/:id/membership              controllers.WorkingGroups.createGroupMembership()
# Approve invitation or request (if invitation, user must send request; if request, group MEMBER must send request)
# TODO: think of rules for this based on roles
#PUT    /api/group/:id/membership/token/:token              controllers.WorkingGroups.approveMembership()  
# Reject invitation or request (if invitation, user must send request; if request, group MEMBER must send request)
#DELETE    /api/group/:id/membership/token/:token              controllers.WorkingGroups.rejectMembership()

# Same for Assembly (creating the membership, depending on the typ, will be invitation or request)
#POST    /api/group/:id/membership              controllers.WorkingGroups.createGroupMembership()
#PUT    /api/group/:id/membership/token/:token              controllers.WorkingGroups.approveMembership()  
#DELETE    /api/group/:id/membership/token/:token              controllers.WorkingGroups.rejectMembership()



# WorkingGroup API
GET            /api/groups                                           controllers.WorkingGroups.findWorkingGroups()
GET            /api/group/:gid                                       controllers.WorkingGroups.findWorkingGroup(gid: Long)
PUT            /api/group/:gid                                       controllers.WorkingGroups.updateWorkingGroup(gid: Long)
POST           /api/group                                            controllers.WorkingGroups.createWorkingGroup()
DELETE         /api/group/:gid                                       controllers.WorkingGroups.deleteWorkingGroup(gid: Long)

# WorkingGroupMemberships API
POST           /api/:t/membership/invitation                         controllers.Memberships.createInvitation(t: String)
POST           /api/:t/membership/request                            controllers.Memberships.createRequest(t: String)

#####################################################################################
# Composition Engine endpoints
GET            /api/assembly/:aid/services                           controllers.Assemblies.findServices(aid: Long)
GET            /api/assembly/:aid/service/:sid/operations            controllers.Assemblies.findServiceOperations(aid: Long, sid: Long)
GET            /api/assembly/:aid/service/:sid/operation/:oid        controllers.Assemblies.findServiceOperationById(aid: Long, sid: Long, oid: Long)


#####################################################################################
# Deprecated endpoints
GET            /api/assembly/:aid/issue/:iid/campaigns               controllers.Assemblies.findIssueCampaigns(aid: Long, iid: Long)
GET            /api/assembly/:aid/issue/:iid/campaign/:cid           controllers.Assemblies.findIssueCampaignById(aid: Long, iid: Long, cid: Long)

# Role API
GET            /api/roles                                            controllers.Roles.findRoles()
GET            /api/role/:rid                                        controllers.Roles.findRole(rid: Long)
PUT            /api/role/:rid                                        controllers.Roles.updateRole(rid: Long)
POST           /api/role                                             controllers.Roles.createRole()
DELETE         /api/role/:rid                                        controllers.Roles.deleteRole(rid: Long)

# Config API
GET            /api/configs                                          controllers.Configs.findConfigs()
GET            /api/config/:cid                                      controllers.Configs.findConfig(cid: Long)
PUT            /api/config/:cid                                      controllers.Configs.updateConfig(cid: Long)
POST           /api/config                                           controllers.Configs.createConfig()
DELETE         /api/config/:cid                                      controllers.Configs.deleteConfig(cid: Long)

# Campaign API
GET            /api/campaigns                                        controllers.Campaigns.findCampaigns()
GET            /api/campaign/:cid                                    controllers.Campaigns.findCampaign(cid: Long)
PUT            /api/campaign/:cid                                    controllers.Campaigns.updateCampaign(cid: Long)
POST           /api/campaign                                         controllers.Campaigns.createCampaign()
DELETE         /api/campaign/:cid                                    controllers.Campaigns.deleteCampaign(cid: Long)

# CampaignPhase API
GET            /api/campaign/:cid/phases                             controllers.CampaignPhases.findCampaignPhases(cid:Long)
GET            /api/campaign/:cid/phase/:cpid                        controllers.CampaignPhases.findCampaignPhase(cid: Long, cpid: Long)
PUT            /api/campaign/:cid/phase/:cpid                        controllers.CampaignPhases.updateCampaignPhase(cid: Long, cpid: Long)
POST           /api/campaign/:cid/phase                              controllers.CampaignPhases.createCampaignPhase(cid: Long)
DELETE         /api/campaign/:cid/phase/:cpid                        controllers.CampaignPhases.deleteCampaignPhase(cid: Long, cpid: Long)

# Contribution API
GET            /api/contributions                                    controllers.Contributions.findContributions()
GET            /api/contribution/:cid                                controllers.Contributions.findContribution(cid: Long)
PUT            /api/contribution/:cid                                controllers.Contributions.updateContribution(cid: Long)
POST           /api/contribution                                     controllers.Contributions.createContribution()
DELETE         /api/contribution/:cid                                controllers.Contributions.deleteContribution(cid: Long)

# Contribution ISSUE API
GET            /api/issues                                           controllers.Contributions.findContributions()
GET            /api/issue/:cid                                       controllers.Contributions.findContribution(cid: Long)
PUT            /api/issue/:cid                                       controllers.Contributions.updateContribution(cid: Long)
POST           /api/issue                                            controllers.Contributions.createContribution()
DELETE         /api/issue/:cid                                       controllers.Contributions.deleteContribution(cid: Long)

# Contribution IDEA API
GET            /api/ideas                                            controllers.Contributions.findContributions()
GET            /api/idea/:cid                                        controllers.Contributions.findContribution(cid: Long)
PUT            /api/idea/:cid                                        controllers.Contributions.updateContribution(cid: Long)
POST           /api/idea                                             controllers.Contributions.createContribution()
DELETE         /api/idea/:cid                                        controllers.Contributions.deleteContribution(cid: Long)

# Contribution QUESTION API
GET            /api/questions                                        controllers.Contributions.findContributions()
GET            /api/question/:cid                                    controllers.Contributions.findContribution(cid: Long)
PUT            /api/question/:cid                                    controllers.Contributions.updateContribution(cid: Long)
POST           /api/question                                         controllers.Contributions.createContribution()
DELETE         /api/question/:cid                                    controllers.Contributions.deleteContribution(cid: Long)

# Contribution COMMENT API
GET            /api/comments                                         controllers.Contributions.findContributions()
GET            /api/comment/:cid                                     controllers.Contributions.findContribution(cid: Long)
PUT            /api/comment/:cid                                     controllers.Contributions.updateContribution(cid: Long)
POST           /api/comment                                          controllers.Contributions.createContribution()
DELETE         /api/comment/:cid                                     controllers.Contributions.deleteContribution(cid: Long)