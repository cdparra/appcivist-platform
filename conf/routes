# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                            controllers.Application.index()

# CORS Support
OPTIONS /*path                                       controllers.Application.checkPreFlight(path)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                                controllers.Assets.at(path="/public", file)
GET     /public/*file                                controllers.Assets.at(path="/public", file)

#####################################################################################
# Very basic User and Authentication Management based on play-authenticate
# TODO: cleanup, remove what is not used and keep what's important
GET     /api/users                                    controllers.Users.getUsers() 
GET     /api/user/:uid                                controllers.Users.getUser(uid: Long)
GET     /api/user/loggedin/:uid                       controllers.Users.getCurrentUser(uid: Long)
GET     /api/user/email/:email                        controllers.Users.getUserByEmail(email: String)

POST    /api/user/login                               controllers.Users.doLogin()
POST    /api/user/logout                              controllers.Users.doLogout()
POST    /api/user/signup                              controllers.Users.doSignup()

PUT     /api/user/:uid                                controllers.Users.updateUser(uid: Long)
DELETE  /api/user/:uid                                controllers.Users.deleteUser(uid: Long)
DELETE  /api/user/:uid/force                          controllers.Users.deleteUserForce(uid: Long)

# Play Authenticate endpoints to validate/integrate, used to verify the email
GET     /api/user/verify/:token                       controllers.Users.verify(token: String)
GET     /api/user/unverified                          controllers.Users.unverified()
GET     /api/user/exists                              controllers.Users.exists()
GET     /api/login/denied                             controllers.Users.onLoginUserNotFound()
GET     /api/authenticate/:provider/denied            controllers.Users.oAuthDenied(provider: String)
GET     /api/authenticated                            controllers.Restricted.index()
GET     /api/login/:id                                controllers.Restricted.id(id: String)
GET     /api/authenticate/:provider                   controllers.AuthenticateLocal.authenticate(provider: String)


# Assemblies API
GET     /api/assemblies                               controllers.Assemblies.findAssemblies()
POST    /api/assembly                                 controllers.Assemblies.createAssembly()
GET     /api/assembly/:id                             controllers.Assemblies.findAssembly(id: Long)
PUT     /api/assembly/:id                             controllers.Assemblies.findAssembly(id: Long)
DELETE  /api/assembly/:id                             controllers.Assemblies.findAssembly(id: Long)
POST    /api/assembly/:id/membership/:type            controllers.Assemblies.createAssemblyMembership(id: Long, type: String)
GET     /api/assembly/:id/membership/:status          controllers.Assemblies.listMembershipsWithStatus(id: Long, status: String)

# Deprecated, convert to ServiceAssemblies
GET     /api/assembly/:aid/issues                     controllers.Assemblies.findIssues(aid: Long)

# WorkingGroup API
GET    /api/assembly/:aid/groups                                    controllers.WorkingGroups.findWorkingGroups(aid: Long)
GET    /api/assembly/:aid/group/:gid                                controllers.WorkingGroups.findWorkingGroup(aid: Long, gid: Long)
PUT    /api/assembly/:aid/group                                     controllers.WorkingGroups.updateWorkingGroup(aid: Long, gid: Long)
POST   /api/assembly/:aid/group                                     controllers.WorkingGroups.createWorkingGroup(aid: Long)
DELETE /api/assembly/:aid/group/:gid                                controllers.WorkingGroups.deleteWorkingGroup(aid: Long, gid: Long)
POST   /api/assembly/:aid/group/:id/membership/:type                controllers.WorkingGroups.createGroupMembership(aid: Long, id: Long, type: String)  
GET    /api/assembly/:aid/group/:id/membership                      controllers.WorkingGroups.listMemberships(aid: Long, id: Long)
GET    /api/assembly/:aid/group/:id/membership/:status              controllers.WorkingGroups.listMembershipsWithStatus(aid: Long, id: Long, status: String)

# Invitations and Requests to join a Group and/or and Assembly
# For invitations membership, let's create a random 64 char token
POST   /api/membership                                              controllers.Memberships.createMembership()
GET    /api/membership/:id                                          controllers.Memberships.readMembership(id: Long)
GET    /api/membership/:id/roles                                    controllers.Memberships.readMembershipRoles(id: Long)
POST   /api/membership/:id/role                                     controllers.Memberships.addMembershipRole(id: Long)
DELETE /api/membership/:id/role/:rid                                controllers.Memberships.deleteMembershipRole(id: Long, rid: Long)
PUT    /api/membership/:id/:status                                  controllers.Memberships.updateMembershipStatus(id: Long, status: String)
DELETE /api/membership/:id                                          controllers.Memberships.deleteMembership(id: Long) 
GET    /api/membership/:id/verify/:token                            controllers.Memberships.verifyMembership(id: Long, token: String) 

#####################################################################################
# Composition Engine endpoints 
# TODO Move to a ServiceAssemblies controller
GET    /api/assembly/:aid/services                                  controllers.ServiceAssemblies.findServices(aid: Long)
GET    /api/assembly/:aid/service/:sid/operations                   controllers.ServiceAssemblies.findServiceOperations(aid: Long, sid: Long)
GET    /api/assembly/:aid/service/:sid/operation/:oid               controllers.ServiceAssemblies.findServiceOperationById(aid: Long, sid: Long, oid: Long)
GET    /api/assembly/:aid/issue/:iid/campaigns                      controllers.ServiceAssemblies.findIssueCampaigns(aid: Long, iid: Long)
GET    /api/assembly/:aid/issue/:iid/campaign/:cid                  controllers.ServiceAssemblies.findIssueCampaignById(aid: Long, iid: Long, cid: Long)

# Role API
GET            /api/roles                                           controllers.Roles.findRoles()
GET            /api/role/:rid                                       controllers.Roles.findRole(rid: Long)
PUT            /api/role/:rid                                       controllers.Roles.updateRole(rid: Long)
POST           /api/role                                            controllers.Roles.createRole()
DELETE         /api/role/:rid                                       controllers.Roles.deleteRole(rid: Long)

# Config API
GET            /api/assembly/:aid/configs                           controllers.Configs.findConfigs(aid: Long)
GET            /api/assembly/:aid/config/:cid                       controllers.Configs.findConfig(aid: Long, cid: Long)
PUT            /api/assembly/:aid/config/:cid                       controllers.Configs.updateConfig(aid: Long, cid: Long)
POST           /api/assembly/:aid/config                            controllers.Configs.createConfig(aid: Long)
DELETE         /api/assembly/:aid/config/:cid                       controllers.Configs.deleteConfig(aid: Long, cid: Long)

# Campaign API
GET            /api/assembly/:aid/campaigns                         controllers.Campaigns.findCampaigns(aid: Long)
GET            /api/assembly/:aid/campaign/:cid                     controllers.Campaigns.findCampaign(aid: Long, cid: Long)
PUT            /api/assembly/:aid/campaign/:cid                     controllers.Campaigns.updateCampaign(aid: Long, cid: Long)
POST           /api/assembly/:aid/campaign                          controllers.Campaigns.createCampaign(aid: Long)
DELETE         /api/assembly/:aid/campaign/:cid                     controllers.Campaigns.deleteCampaign(aid: Long, cid: Long)

# CampaignPhase API
GET            /api/assembly/:aid/campaign/:cid/phases              controllers.CampaignPhases.findCampaignPhases(aid: Long, cid:Long)
GET            /api/assembly/:aid/campaign/:cid/phase/:cpid         controllers.CampaignPhases.findCampaignPhase(aid: Long, cid: Long, cpid: Long)
PUT            /api/assembly/:aid/campaign/:cid/phase/:cpid         controllers.CampaignPhases.updateCampaignPhase(aid: Long, cid: Long, cpid: Long)
POST           /api/assembly/:aid/campaign/:cid/phase               controllers.CampaignPhases.createCampaignPhase(aid: Long, cid: Long)
DELETE         /api/assembly/:aid/campaign/:cid/phase/:cpid         controllers.CampaignPhases.deleteCampaignPhase(aid: Long, cid: Long, cpid: Long)

# Contribution API
GET            /api/assembly/:aid/contributions                     controllers.Contributions.findContributions(aid: Long)
GET            /api/assembly/:aid/contribution/:cid                 controllers.Contributions.findContribution(aid: Long, cid: Long)
PUT            /api/assembly/:aid/contribution/:cid                 controllers.Contributions.updateContribution(aid: Long, cid: Long)
POST           /api/assembly/:aid/contribution                      controllers.Contributions.createContribution(aid: Long)
DELETE         /api/assembly/:aid/contribution/:cid                 controllers.Contributions.deleteContribution(aid: Long, cid: Long)

# Contribution ISSUE API
GET            /api/assembly/:aid/issues                                           controllers.Contributions.findContributions(aid: Long)
GET            /api/assembly/:aid/issue/:cid                                       controllers.Contributions.findContribution(aid: Long, cid: Long)
PUT            /api/assembly/:aid/issue/:cid                                       controllers.Contributions.updateContribution(aid: Long, cid: Long)
POST           /api/assembly/:aid/issue                                            controllers.Contributions.createContribution(aid: Long)
DELETE         /api/assembly/:aid/issue/:cid                                       controllers.Contributions.deleteContribution(aid: Long, cid: Long)

# Contribution IDEA API
GET            /api/assembly/:aid/ideas                                            controllers.Contributions.findContributions(aid: Long)
GET            /api/assembly/:aid/idea/:cid                                        controllers.Contributions.findContribution(aid: Long, cid: Long)
PUT            /api/assembly/:aid/idea/:cid                                        controllers.Contributions.updateContribution(aid: Long, cid: Long)
POST           /api/assembly/:aid/idea                                             controllers.Contributions.createContribution(aid: Long)
DELETE         /api/assembly/:aid/idea/:cid                                        controllers.Contributions.deleteContribution(aid: Long, cid: Long)

# Contribution QUESTION API
GET            /api/assembly/:aid/questions                                        controllers.Contributions.findContributions(aid: Long)
GET            /api/assembly/:aid/question/:cid                                    controllers.Contributions.findContribution(aid: Long, cid: Long)
PUT            /api/assembly/:aid/question/:cid                                    controllers.Contributions.updateContribution(aid: Long, cid: Long)
POST           /api/assembly/:aid/question                                         controllers.Contributions.createContribution(aid: Long)
DELETE         /api/assembly/:aid/question/:cid                                    controllers.Contributions.deleteContribution(aid: Long, cid: Long)

# Contribution COMMENT API
GET            /api/assembly/:aid/comments                                         controllers.Contributions.findContributions(aid: Long)
GET            /api/assembly/:aid/comment/:cid                                     controllers.Contributions.findContribution(aid: Long, cid: Long)
PUT            /api/assembly/:aid/comment/:cid                                     controllers.Contributions.updateContribution(aid: Long, cid: Long)
POST           /api/assembly/:aid/comment                                          controllers.Contributions.createContribution(aid: Long)
DELETE         /api/assembly/:aid/comment/:cid                                     controllers.Contributions.deleteContribution(aid: Long, cid: Long)





#####################################################################################
# API Docs

#GET  /api-docs.json  controllers.ApiHelpController.getResources